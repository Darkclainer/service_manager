// Code generated by "enumer -text -type TaskType service_manager.go"; DO NOT EDIT.

//
package main

import (
	"fmt"
)

const _TaskTypeName = "TaskStartTaskStopTaskExit"

var _TaskTypeIndex = [...]uint8{0, 9, 17, 25}

func (i TaskType) String() string {
	if i < 0 || i >= TaskType(len(_TaskTypeIndex)-1) {
		return fmt.Sprintf("TaskType(%d)", i)
	}
	return _TaskTypeName[_TaskTypeIndex[i]:_TaskTypeIndex[i+1]]
}

var _TaskTypeValues = []TaskType{0, 1, 2}

var _TaskTypeNameToValueMap = map[string]TaskType{
	_TaskTypeName[0:9]:   0,
	_TaskTypeName[9:17]:  1,
	_TaskTypeName[17:25]: 2,
}

// TaskTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TaskTypeString(s string) (TaskType, error) {
	if val, ok := _TaskTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TaskType values", s)
}

// TaskTypeValues returns all values of the enum
func TaskTypeValues() []TaskType {
	return _TaskTypeValues
}

// IsATaskType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TaskType) IsATaskType() bool {
	for _, v := range _TaskTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for TaskType
func (i TaskType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TaskType
func (i *TaskType) UnmarshalText(text []byte) error {
	var err error
	*i, err = TaskTypeString(string(text))
	return err
}
