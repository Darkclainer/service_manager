// Code generated by "enumer -text -type MessageType service.go"; DO NOT EDIT.

//
package main

import (
	"fmt"
)

const _MessageTypeName = "MessageStateMessageString"

var _MessageTypeIndex = [...]uint8{0, 12, 25}

func (i MessageType) String() string {
	if i < 0 || i >= MessageType(len(_MessageTypeIndex)-1) {
		return fmt.Sprintf("MessageType(%d)", i)
	}
	return _MessageTypeName[_MessageTypeIndex[i]:_MessageTypeIndex[i+1]]
}

var _MessageTypeValues = []MessageType{0, 1}

var _MessageTypeNameToValueMap = map[string]MessageType{
	_MessageTypeName[0:12]:  0,
	_MessageTypeName[12:25]: 1,
}

// MessageTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MessageTypeString(s string) (MessageType, error) {
	if val, ok := _MessageTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MessageType values", s)
}

// MessageTypeValues returns all values of the enum
func MessageTypeValues() []MessageType {
	return _MessageTypeValues
}

// IsAMessageType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MessageType) IsAMessageType() bool {
	for _, v := range _MessageTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for MessageType
func (i MessageType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MessageType
func (i *MessageType) UnmarshalText(text []byte) error {
	var err error
	*i, err = MessageTypeString(string(text))
	return err
}
